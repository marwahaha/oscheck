---
# Distro specific
- include: tasks/install-deps/main.yml

# Distro agnostic
- include: tasks/configure-postfix.yml
- include: tasks/configure-watchdog.yml
- include: tasks/disk-setup.yml

  vars:
    oscheck_run_tests: "{{ oscheck_run_tests }}"

- name: git clone oscheck
  git:
    repo: "{{ oscheck_git }}"
    dest: "{{ oscheck_data }}"
  tags: [ 'oscheck', 'install', 'git']
  register: oscheck_cloned

- name: Install oscheck as root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  environment:
    FSTYP:  "{{ oscheck_fstyp }}"
  command: "{{  make }} install"
  tags: [ 'oscheck', 'install', 'root']
  args:
    chdir: "{{ oscheck_data }}"
  register: install_oscheck
  when: oscheck_cloned is success
- debug: var=install_oscheck.stdout_lines
- debug: var=install_oscheck.delta

# XXX: port the below to the above ansible targets
# This is complete now for Debian. Other distros need
# to convert their oscheck --install-deps target to
# ansible. Once all distros are proted we can remove this
# as then provisioning would all be handled through
# ansible.
- name: Install oscheck dependencies
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./oscheck.sh --install-deps"
  tags: [ 'oscheck', 'deps', 'shell']
  args:
    chdir: "{{ oscheck_data }}"
  when: oscheck_cloned is success

- name: git clone fstests
  git:
    repo: "{{ fstests_git }}"
    dest: "{{ fstests_data }}"
  register: fstests_clone
  tags: [ 'oscheck', 'git', 'fstests']

- name: Build fstests
  tags: [ 'oscheck', 'fstests', 'build']
  make:
    chdir: "{{ fstests_data }}"
    params:
      NUM_THREADS: "{{ make_num_jobs }}"
  register: fstests_build
  when: fstests_clone is success
- debug: var=fstests_build.stdout_lines

- name: Install fstests
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{  make }} install"
  tags: [ 'oscheck', 'fstests', 'install', 'root']
  args:
    chdir: "{{ fstests_data }}"
  register: fstests_build_install
  when: fstests_build is success

- name: Generate truncated disks using oscheck's gendisk.sh
  tags: [ 'oscheck', 'fstests', 'fstests', 'run_tests', 'gendisks' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./gendisks.sh -d -m"
  args:
    chdir: "{{ fstests_data_target }}"
  register: gendisks
  when:
    - install_oscheck is success
    - oscheck_run_tests is true
    - fstests_build_install is success

- name: Run fstests using oscheck.sh
  tags: [ 'oscheck', 'fstests', 'fstests', 'run_tests']
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./oscheck.sh"
  args:
    chdir: "{{ fstests_data_target }}"
  register: out
  when:
    - oscheck_run_tests is true
    - gendisks is success
